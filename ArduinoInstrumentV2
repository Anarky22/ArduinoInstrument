/*#define led 13
#define led2 12
#define led3 11
#define led4 10
#define led5 9
#define led6 8
*/
#define buzzer 8
unsigned long echo = 0;
int echoPin=11;
int ultraSoundSignal = 9; // Ultrasound signal pin
unsigned long ultrasoundValue = 0;
double distance = 0;
int frequency = 0;
const int recordButton=7, playButton=4, dropButton=1, raiseButton=2, muteButton=3;
int note[] = {262, 277, 294, 311, 330, 349, 370, 392, 415, 440, 466, 494, 523};
int octave = 4;
int sound_duration[100], sound_frequency[100], order=0; // arrays for looping mechanism
  unsigned long previousTime=0, elapsedTime=0; 

void setup() {

  Serial.begin (9600);

  /*pinMode(led, OUTPUT);
  pinMode(led2, OUTPUT);
  pinMode(led3, OUTPUT);
  pinMode(led4, OUTPUT);
  pinMode(led5, OUTPUT);
  pinMode(led6, OUTPUT);
  */
  pinMode(dropButton, INPUT);
  pinMode(raiseButton, INPUT);
  pinMode(muteButton, INPUT);
  
  pinMode(playButton, INPUT);
  pinMode(recordButton, INPUT);
  pinMode(buzzer, OUTPUT);
  pinMode(ultraSoundSignal,OUTPUT);
}

void loop() {
  getDistance(); //sets global variable distance to the distance in cm
  getOctave(); //Checks to see if octave is changed
  getNote(); //sets global variable frequency to the correct note's frequency in hertz
 
  if (digitalRead(playButton)==LOW)
    play();
  else if(muteButton == LOW)
    tone(buzzer, frequency);
  else
    noTone(buzzer);
    
  if (digitalRead(recordButton)==LOW)
    record();
  else
    sound_frequency[order]==frequency;

  
  Serial.print(distance);
  Serial.println(" cm");
  
}

void getDistance(){
    pinMode(ultraSoundSignal, OUTPUT); 
  
  digitalWrite(ultraSoundSignal, LOW); 
  delayMicroseconds(2); 
  digitalWrite(ultraSoundSignal, HIGH);
  delayMicroseconds(5); 
  digitalWrite(ultraSoundSignal, LOW); 

  /*takes the recorded value and converts to distance*/

  pinMode(echoPin, INPUT); 
  echo = pulseIn(echoPin, HIGH);
  distance = (echo / 58.138);
}

void getNote(){
  //millis();
  if (distance <= 9.5) {
    //digitalWrite(led, HIGH);
    frequency=note[0]; //C
  }
  else if (distance <= 17) {
    //digitalWrite(led2, HIGH);
    frequency = note[1]; //C#/D♭
  }
  else if (distance <= 24.5) {
    //digitalWrite(led3, HIGH);
    frequency = note[2]; //D
  } 
  else if (distance <= 32) {
    //digitalWrite(led4, HIGH);
    frequency = note[3]; //D#/E♭
  }
  else if (distance <= 39.5) {
    //digitalWrite(led5, HIGH);
    frequency= note[4]; //E
  }
  else if (distance <= 47) {
    //digitalWrite(led6, HIGH);
    frequency= note[5]; //F
  }
  else if (distance <= 54.5){
    frequency = note[6];//F#/G♭
  }
  else if(distance <= 62){
    frequency = note[7]; //G
  }
  else if(distance <= 69.5){
    frequency = note[8]; //G#/A♭
  }
  else if(distance <= 77){
    frequency = note[9]; //A
  }
  else if(distance <= 84.5){
    frequency = note[10];//A#/B♭
  }
  else if(distance <= 92){
    frequency = note[11];//B
  }
  else if(distance <= 99.5){
    frequency = note[12];//C
  }else{
    frequency = 0;
  }


} 

void getOctave(){
  if(dropButton == HIGH && octave >= 1){ //lowers octave
    for(int i = 0; i < sizeof(note)/sizeof(note[0]); i++){
      note[i] /=2;
    }
    octave--;
  }

  if(raiseButton == HIGH && octave <= 8){
    for(int i = 0; i < sizeof(note)/sizeof(note[0]); i++){
      note[i] *= 2;
    }
    octave++;
  }
}

void record()
{
  if(sound_frequency[order]!=frequency)
  {
    sound_duration[order]=millis() - previousTime;
    previousTime = millis();

    order++;
  }
  sound_frequency[order]==frequency;
}
void play()
{
  for(int i=0;i<100;i++)
  {
    tone(buzzer, sound_frequency[i], sound_duration[i]);
  }
}
void reset()
{
  order=0;
  memset(sound_frequency,0,sizeof(sound_frequency));
  memset(sound_duration,0,sizeof(sound_duration));
}
